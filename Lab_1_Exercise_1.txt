function E = lab1_exercise1(J)
% Validate input
if nargin == 0, J = 10; end
if ~(isscalar(J) && J >= 0 && J == floor(J))
error('J must be a nonnegative integer.');
end


% Exact solution y(t) = cos(t); we need y(1)
y_exact_1 = cos(1.0);


E = zeros(J+1,1); % E(j+1) stores the error for N = 2^j
Ns = zeros(J+1,1);
yN = zeros(J+1,1); % numerical y at t=1 for each N


% Initial conditions for the 1st-order system
% Let x1 = y, x2 = y', x3 = y''
x1_0 = 1.0;
x2_0 = 0.0;
x3_0 = -1.0;


for j = 0:J
N = 2^j; % grid size
h = 1.0 / N; % step length over [0,1]


% State vector at t0
x1 = x1_0; x2 = x2_0; x3 = x3_0;
t = 0.0;


% Forward Euler loop
for n = 1:N
% Right-hand side for the 1st-order system at (t, [x1;x2;x3])
f1 = x2;
f2 = x3;
% From y''' + 4y'' + 5y' + 2y = -4*sin(t) - 2*cos(t)
% => x3' = -4*x3 - 5*x2 - 2*x1 + (-4*sin(t) - 2*cos(t))
f3 = -4*x3 - 5*x2 - 2*x1 + ( -4*sin(t) - 2*cos(t) );


% Euler update
x1 = x1 + h * f1;
x2 = x2 + h * f2;
x3 = x3 + h * f3;
t = t + h;
end


yN(j+1) = x1; % approximation to y(1)
E(j+1) = abs(x1 - y_exact_1);
Ns(j+1) = N;
end


% Pretty print a table with ratios E(N)/E(2N)
fprintf('\n=== Euler on y'''': error at t=1 for N=2^j ===\n');
fprintf('%6s %18s %18s %12s\n', 'N', 'y_N (at t=1)', 'error |y_N - cos 1|', 'E(N)/E(2N)');
for k = 1:numel(Ns)
ratio = NaN;
end